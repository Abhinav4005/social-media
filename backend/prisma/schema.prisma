generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LikeStatus {
  LIKE
  DISLIKE
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}

model User {
  id                    Int      @id @default(autoincrement())
  name                  String
  email                 String   @unique
  password              String
  bio                   String?
  profileImage          String?
  location              String?

  posts                 Post[]
  comments              Comment[]
  postLikes             PostLike[]
  commentLikes          CommentLike[]

  // Self-relation for following/followers

  followers             Follower[] @relation("FollowedUser")
  following             Follower[] @relation("FollowingUser")

  sentNotifications      Notification[] @relation("NotificationSender")
  receivedNotifications   Notification[] @relation("NotificationReceiver")

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Follower {
  id             Int @id @default(autoincrement())
  follower       User @relation("FollowingUser", fields:[followerId], references:[id])
  followerId     Int

  following      User @relation("FollowedUser", fields:[followingId], references: [id])
  followingId    Int

  @@unique([followerId, followingId])
}


model Post {
  id            Int @id @default(autoincrement())
  title         String
  description   String
  image         String?
  video         String?
  user          User @relation(fields:[userId], references:[id])
  userId        Int
  comments      Comment[]
  post_likes    PostLike[]
  notifications Notification[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Comment {
  id            Int @id @default(autoincrement())
  content       String
  post          Post @relation(fields: [postId], references:[id], onDelete: Cascade)
  postId        Int
  user          User @relation(fields:[userId], references:[id])
  userId        Int
  parentId      Int?
  parent        Comment?   @relation("CommentReplies", fields:[parentId], references:[id])
  replies       Comment[]  @relation("CommentReplies")

  likes         CommentLike[]
  notifications Notification[]
  createdAt     DateTime @default(now())
}

model PostLike {
  id            Int @id @default(autoincrement())
  post          Post @relation(fields:[postId], references:[id], onDelete: Cascade)
  postId        Int
  user          User @relation(fields:[userId], references:[id])
  userId        Int
  createdAt     DateTime @default(now())
  status        LikeStatus @default(DISLIKE)
  @@unique([postId, userId])
}

model CommentLike {
  id            Int @id @default(autoincrement())
  comment       Comment @relation(fields:[commentId], references:[id])
  commentId     Int
  user          User @relation(fields:[userId], references:[id])
  userId        Int
  createdAt     DateTime @default(now())
  status        LikeStatus @default(DISLIKE)
  @@unique([commentId, userId])
}

model Notification {
  id            Int         @id @default(autoincrement())
  type          NotificationType
  sender        User        @relation("NotificationSender", fields:[senderId], references:[id])
  senderId      Int
  receiver      User        @relation("NotificationReceiver", fields:[receiverId], references:[id])
  receiverId    Int
  post          Post?       @relation(fields:[postId], references:[id])
  postId        Int?
  comment       Comment?    @relation(fields:[commentId], references:[id])
  commentId     Int?
  createdAt     DateTime    @default(now())
  read          Boolean     @default(false)

  @@index([receiverId, read])
}