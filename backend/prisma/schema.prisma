generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LikeStatus {
  LIKE
  DISLIKE
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  REPLY
  MENTION
  MESSAGE
  REACTION
  GROUP_INVITE
  SYSTEM
}

enum MessageType {
  TEXT
  IMAGE 
  VIDEO
  FILE
}

enum RoomType {
  DM
  GROUP
}

enum MemberRole {
  ADMIN
  MEMBER
}

model User {
  id                      Int               @id @default(autoincrement())
  name                    String
  email                   String            @unique
  password                String
  bio                     String?
  profileImage            String?
  location                String?
  dateOfBirth             DateTime?
  isVerified              Boolean           @default(false)
  isDeleted               Boolean           @default(false)

  posts                   Post[]
  comments                Comment[]
  postLikes               PostLike[]
  commentLikes            CommentLike[]

  // Self-relation for following/followers

  followers               Follower[]        @relation("FollowedUser")
  following               Follower[]        @relation("FollowingUser")

  sentNotifications       Notification[]    @relation("NotificationSender")
  receivedNotifications   Notification[]    @relation("NotificationReceiver")

  sentMessage             Message[]         @relation("SenderMessages")
  MessageReaction         Reaction[]
  roomMemberShip          RoomMember[]
  messageReceipt          MessageReceipt[]
  createdReactionType     ReactionType[]    @relation("UserReactionTypes")

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Follower {
  id             Int @id @default(autoincrement())
  follower       User @relation("FollowingUser", fields:[followerId], references:[id])
  followerId     Int

  following      User @relation("FollowedUser", fields:[followingId], references: [id])
  followingId    Int

  @@unique([followerId, followingId])
}


model Post {
  id            Int @id @default(autoincrement())
  title         String
  description   String
  image         String?
  video         String?
  user          User @relation(fields:[userId], references:[id])
  userId        Int
  comments      Comment[]
  post_likes    PostLike[]
  notifications Notification[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Comment {
  id            Int @id @default(autoincrement())
  content       String
  post          Post @relation(fields: [postId], references:[id], onDelete: Cascade)
  postId        Int
  user          User @relation(fields:[userId], references:[id])
  userId        Int
  parentId      Int?
  parent        Comment?   @relation("CommentReplies", fields:[parentId], references:[id])
  replies       Comment[]  @relation("CommentReplies")

  likes         CommentLike[]
  notifications Notification[]
  createdAt     DateTime @default(now())
}

model PostLike {
  id            Int @id @default(autoincrement())
  post          Post @relation(fields:[postId], references:[id], onDelete: Cascade)
  postId        Int
  user          User @relation(fields:[userId], references:[id])
  userId        Int
  createdAt     DateTime @default(now())
  status        LikeStatus @default(DISLIKE)
  @@unique([postId, userId])
}

model CommentLike {
  id            Int @id @default(autoincrement())
  comment       Comment @relation(fields:[commentId], references:[id])
  commentId     Int
  user          User @relation(fields:[userId], references:[id])
  userId        Int
  createdAt     DateTime @default(now())
  status        LikeStatus @default(DISLIKE)
  @@unique([commentId, userId])
}

model Notification {
  id            Int         @id @default(autoincrement())
  type          NotificationType
  sender        User        @relation("NotificationSender", fields:[senderId], references:[id])
  senderId      Int
  receiver      User        @relation("NotificationReceiver", fields:[receiverId], references:[id])
  receiverId    Int
  post          Post?       @relation(fields:[postId], references:[id], onDelete: Cascade)
  postId        Int?
  comment       Comment?    @relation(fields:[commentId], references:[id], onDelete: Cascade)
  message       Message?    @relation(fields:[messageId], references:[id], onDelete: Cascade)
  messageId     Int?
  room          Room?       @relation(fields:[roomId], references:[id])
  roomId        Int?
  commentId     Int?
  createdAt     DateTime    @default(now())
  read          Boolean     @default(false)

  @@index([receiverId, read])
}

model Room {
  id            Int         @id @default(autoincrement())
  name          String?
  type          RoomType
  profileImage  String?
  members       RoomMember[]
  messages      Message[]
  lastMessage   Message?    @relation("LastMessage", fields:[lastMessageId], references:[id])
  lastMessageId Int?        @unique  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  dmKey         String?     @unique
  notifications Notification[]
}

model RoomMember {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references:[id])
  userId        Int
  room          Room        @relation(fields: [roomId], references:[id])
  roomId        Int
  role          MemberRole  @default(MEMBER)
  joinedAt      DateTime    @default(now())
  lastSeenAt    DateTime    @default(now())
  isTyping      Boolean     @default(false)
  isPinned      Boolean     @default(false)
  readMessages  MessageRead[]
  muteUntil     DateTime?

  @@unique([roomId, userId])
  @@index([userId])
}

model MessageRead {
  id        Int           @id  @default(autoincrement())
  message   Message?      @relation(fields:[messageId], references:[id])
  messageId Int?
  member    RoomMember    @relation(fields:[memberId], references:[id])
  memberId  Int
  readAt    DateTime      @default(now())

  @@unique([messageId, memberId])
}

model Message {
  id                Int           @id @default(autoincrement())
  text              String? 
  sender            User          @relation("SenderMessages",fields: [senderId], references:[id])
  senderId          Int
  room              Room          @relation(fields:[roomId], references:[id], onDelete: Cascade)
  roomId            Int
  type              MessageType   @default(TEXT)
  attachments       Attachment[]
  receipts          MessageReceipt[]
  isEdited          Boolean       @default(false)
  isDeleted         Boolean       @default(false)
  repliedTo         Message?      @relation("ReplyTo", fields:[replyTo], references:[id], onDelete: Cascade)
  replyTo           Int?  
  replies           Message[]     @relation("ReplyTo")
  reactions         Reaction[]
  readBy            MessageRead[]
  createdAt         DateTime      @default(now())

  lastMessageOfRoom Room?         @relation("LastMessage")
  notifications     Notification[]

  @@index([roomId, createdAt])
}

model MessageReceipt {
  id            Int       @id @default(autoincrement())
  message       Message   @relation(fields:[messageId], references:[id])
  messageId     Int
  user          User      @relation(fields:[userId], references:[id])
  userId        Int
  deliveredAt   DateTime?
  readAt        DateTime?

  @@unique([messageId, userId])
  @@index([userId])
}

model Reaction {
  id              Int           @id @default(autoincrement())
  message         Message       @relation(fields:[messageId], references:[id])
  messageId       Int
  user            User          @relation(fields:[userId], references:[id])
  userId          Int
  reactionType    ReactionType  @relation(fields: [reactionTypeId], references:[id])
  reactionTypeId  Int
  createdAt       DateTime       @default(now())
}


model ReactionType {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  unicode     String?
  imageUrl    String?
  category    String?
  keywords    String?
  createdBy   User?    @relation("UserReactionTypes",fields:[createdById], references:[id])
  createdById Int?
  createdAt   DateTime @default(now())

  reactions   Reaction[]
}

model Attachment {
  id          Int         @id @default(autoincrement())
  message     Message     @relation(fields:[messageId], references:[id])
  messageId   Int
  url         String
  mimeType    String
  uploadedAt  DateTime     @default(now())
}